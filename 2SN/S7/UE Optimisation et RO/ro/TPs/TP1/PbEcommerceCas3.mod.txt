### Model

### Sets

set STORE;
set FLUID;
set CLIENT;

### Variables

var ProductAssignments{s in STORE, f in FLUID, c in CLIENT}, integer >= 0;
var ParcelAssignments{c in CLIENT, s in STORE}, binary;

### Constants

param Commands{c in CLIENT, f in FLUID};
param Stocks{s in STORE, f in FLUID};
param ProductCosts{s in STORE, f in FLUID};
param FixedShippingCosts{c in CLIENT, s in STORE};
param VariableShippingCosts{c in CLIENT, s in STORE};

### Constraints

s.t. RespectCommands{f in FLUID, c in CLIENT}: sum{s in STORE} ProductAssignments[s,f,c] = Commands[c,f];
s.t. RespectStocks{s in STORE, f in FLUID}: sum{c in CLIENT} ProductAssignments[s,f,c] <= Stocks[s,f];
s.t. RespectShipping1{s in STORE, c in CLIENT}: sum{f in FLUID} ProductAssignments[s,f,c] <= sum{f in FLUID} ParcelAssignments[c,s] * Commands[c,f];
s.t. RespectShipping2{s in STORE, c in CLIENT}: ParcelAssignments[c,s] <= sum{f in FLUID} ProductAssignments[s,f,c];

### Objective

minimize TotalCost:
    (sum{s in STORE, f in FLUID, c in CLIENT} ProductAssignments[s,f,c] * (ProductCosts[s,f] + VariableShippingCosts[c,s])) + (sum{s in STORE, c in CLIENT} ParcelAssignments[c,s] * FixedShippingCosts[c,s]);

### End



end;

